// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xWS2/bRhD+K4NtgbYAI9lJX9DN7SExkDSCLaMHw4fxckRuyn14dxmHNfTfi9mlHhQZ",
	"IanRniSSO69v5vtmn4S02llDJgaxeBKegrMmUHr43RNGKvlvSUF65aKyRix2HzabQgRZk8Z0/h2VCvmP",
	"89aRjyq7Mahp7OMP1AR2DbEm0GwIKpIWhYidI7EQIXplKrEpRMQqjO3fqhCTPVbAEQJgCFYqTgweVaz3",
	"nkUh2HdyMvaeX6D32PFz65txsJurtxAtoJQUwkHKa9XQOOVNITw9tMozdre5/r6M7P9uZ2LvP5CMHHeF",
	"1WmQIlZT6Ny4xmJ5RQ8thTgGX1Os7UQL36xWS8gfubJ7gjZQCd+3ocWm6WB5swLrYfn+evXDVNigKkPl",
	"G8KSPHvHslTsGpvlIP7IcCKNOnkJsAUN1tankn1f1TFchfj0orIv+pd1jG7WZ/K5Bq5qAufpRU4b+n62",
	"CbvBoJxuJfsutpgegTBuKlsrs7bjdC6Wl6lIjQYrZSpubgA0ZT9X0ppIJqYzwVkfA1hfoVF/I3sIM85U",
	"xYajXUvradlgB4l/cLG8FIX4SD7kWOez89kZA2MdGXRKLMSr2dnsTBTCYaxTl+Z6S92K4jjdK4pe0cdD",
	"oga47yAQellz/pwoQnAk1VpJLodT5EFICV+WYiFeU3zXo+zQo6ZIPojF7ahXWHFzsvMM0z4sc5kPPbTk",
	"O1H04iIyOfatir6lrTZNjOHmrhhK3cuzM/7pcU8D7VyjZMp+/iFwYk8H/nZ68q2ntViIb+Z7HZ33kjjP",
	"1R6NULa8OxaezYgaF9D0EneIusaYEd9KQtLgVmv0HQ9DBi1ZpBalI4VwNkz09TUZbhABHpODUc/s4Fh4",
	"IHdFGlNPlQqR/JF8Z+HVFLHEiBBaWQOGpM/JjMd8Bu+NpCMRBRX6eFRCG7YFDrMqeqPeuwqAbbQao5JJ",
	"s7ZJUTkevqUNu+nrZeU3W3Zf1fRnrTX6hNplwraOPBglCZySsfX0r7be6YW3C3crzl+++lEU4qeff/mV",
	"5+5LV+GJLTYtdUP2bUYMO/8qsE8Ra7jzJrizHE5zntgmIcWC7HWKesSdfKvpu5YAHY5fOj7f9uW0UOKO",
	"vNg0eeyn9HCV7wT/vRStsgw8U4hS7UPQ0kBua/y80vTYYrquPdZK1iDRgCfnKfCmQ9PFpGuN+ivpUYMd",
	"+e+ydhTQ2Fx/sd8xVfpgPXC5FNPtY5r3O5T/H9rnXbTn+5+k7xvq4DpiqVr9ZffFZ1Bsag525+aDu/vx",
	"7CMYeuzXymbzTwAAAP//dHdqZR0MAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
